/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package benchmark.speedb;

import benchmark.speedb.proto.Command;
import benchmark.speedb.proto.Command.CompleteTask;
import benchmark.speedb.proto.Command.StartTask;
import benchmark.speedb.proto.Command.StartWf;
import benchmark.speedb.proto.KafkaStreamsMetricsReply;
import benchmark.speedb.proto.MetricsServiceGrpc;
import benchmark.speedb.proto.WorfklowMetricsResponse;
import benchmark.speedb.proto.WorkflowMetricsQuery;
import benchmark.speedb.utils.Util;
import com.google.protobuf.Empty;
import com.google.protobuf.util.JsonFormat;
import io.grpc.ManagedChannelBuilder;
import java.io.IOException;
import java.util.Properties;
import java.util.UUID;
import java.util.concurrent.CountDownLatch;

public class App {

    public static void main(String[] args) throws InterruptedException, IOException {
        if (args.length < 1) {
            printHelp();
            System.exit(1);
        }

        // Can override, but no need
        Properties props = new Properties();
        Config cfg = new Config(props);

        String command = args[0];
        switch (command) {
            case "setup":
                cfg.doIdempotentSetup();
                break;
            case "server":
                CountDownLatch latch = new CountDownLatch(1);
                BenchmarkServer server = new BenchmarkServer(cfg);

                // prettier-ignore
                Runtime.getRuntime().addShutdownHook(new Thread(() -> {
                    server.close();
                    latch.countDown();
                }));

                new Thread(() -> {
                    try {
                        server.run();
                    } catch (Exception exn) {
                        throw new RuntimeException(exn);
                    }
                })
                    .start();
                latch.await();
                break;
            case "launchTests":
                // Handle client command
                try {
                    int numTests = Integer.parseInt(args[1]);
                    int testSize = Integer.parseInt(args[2]);
                    launchTests(cfg, numTests, testSize);
                } catch (Exception exn) {
                    exn.printStackTrace();
                    printHelp();
                    System.exit(1);
                }

                break;
            case "workflowMetrics":
                int numWindows = args.length > 1 ? Integer.valueOf(args[1]) : 100;

                WorfklowMetricsResponse resp = MetricsServiceGrpc
                    .newBlockingStub(
                        ManagedChannelBuilder
                            .forAddress("localhost", 5000)
                            .usePlaintext()
                            .build()
                    )
                    .workflowMetrics(
                        WorkflowMetricsQuery
                            .newBuilder()
                            .setLatestWindowStart(
                                Util.fromTime(System.currentTimeMillis())
                            )
                            .setNumWindows(numWindows)
                            .build()
                    );
                System.out.println(
                    JsonFormat.printer().includingDefaultValueFields().print(resp)
                );

                break;
            case "streamsMetrics":
                KafkaStreamsMetricsReply ksr = MetricsServiceGrpc
                    .newBlockingStub(
                        ManagedChannelBuilder
                            .forAddress("localhost", 5000)
                            .usePlaintext()
                            .build()
                    )
                    .kafkaStreamsMetrics(Empty.getDefaultInstance());
                System.out.println(
                    JsonFormat.printer().includingDefaultValueFields().print(ksr)
                );
            default:
                // Invalid command
                System.out.println("Invalid command");
                break;
        }
    }

    private static void printHelp() {
        System.err.println(
            "Three available commands:\n" +
            "1. `setup` creates necessary kafka topics.\n" +
            "2. `server` runs the Kafka Streams application.\n" +
            "3. `launchTests` launches tests. It requires two integer arguments:\n" +
            "    a) number of individual test cases to launch.\n" +
            "    b) number of bytes for each simulated task run."
        );
    }

    private static void launchTests(Config config, int numTests, int testSize) {
        String wfPrefix = UUID.randomUUID().toString() + "-";

        // First, launch the workflows.
        for (int i = 0; i < numTests; i++) {
            String wfId = wfPrefix + i;
            config.sendRecord(
                Command
                    .newBuilder()
                    .setStartWf(StartWf.newBuilder().setId(wfId))
                    .build()
            );
        }

        int numTasksPerWorkflow = 100;
        for (int taskNum = 0; taskNum < numTasksPerWorkflow; taskNum++) {
            // Send task starts
            for (int wfNum = 0; wfNum < numTests; wfNum++) {
                String wfId = wfPrefix + wfNum;
                config.sendRecord(
                    Command
                        .newBuilder()
                        .setStartTask(
                            StartTask
                                .newBuilder()
                                .setWfId(wfId)
                                .setTaskNumber(taskNum)
                        )
                        .build()
                );
            }

            // Send taskCompletes
            for (int wfNum = 0; wfNum < numTests; wfNum++) {
                String wfId = wfPrefix + wfNum;
                config.sendRecord(
                    Command
                        .newBuilder()
                        .setCompleteTask(
                            CompleteTask
                                .newBuilder()
                                .setWfId(wfId)
                                .setTaskNumber(taskNum)
                                .setPayload(generatePayload(testSize))
                        )
                        .build()
                );
            }
        }
        config.flush();
    }

    private static String generatePayload(int testSize) {
        String guid = UUID.randomUUID().toString().replace("-", "");
        StringBuilder b = new StringBuilder();
        for (int i = 0; i <= testSize / guid.length(); i++) {
            b.append(guid);
        }
        return b.toString().substring(0, testSize);
    }
}
